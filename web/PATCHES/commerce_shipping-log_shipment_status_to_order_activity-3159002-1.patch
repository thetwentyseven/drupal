diff --git a/src/EventSubscriber/ShipmentSubscriber.php b/src/EventSubscriber/ShipmentSubscriber.php
index 10aef1ad..dea3dd4e 100644
--- a/src/EventSubscriber/ShipmentSubscriber.php
+++ b/src/EventSubscriber/ShipmentSubscriber.php
@@ -23,6 +23,13 @@ class ShipmentSubscriber implements EventSubscriberInterface {
    */
   protected $shipmentConfirmationMail;
 
+  /**
+   * The log storage.
+   *
+   * @var \Drupal\commerce_log\LogStorageInterface
+   */
+  protected $logStorage;
+
   /**
    * Constructs a new ShipmentSubscriber object.
    *
@@ -34,6 +41,7 @@ class ShipmentSubscriber implements EventSubscriberInterface {
   public function __construct(EntityTypeManagerInterface $entity_type_manager, ShipmentConfirmationMailInterface $shipment_confirmation_mail) {
     $this->entityTypeManager = $entity_type_manager;
     $this->shipmentConfirmationMail = $shipment_confirmation_mail;
+    $this->logStorage = $entity_type_manager->getStorage('commerce_log');
   }
 
   /**
@@ -42,6 +50,7 @@ public function __construct(EntityTypeManagerInterface $entity_type_manager, Shi
   public static function getSubscribedEvents() {
     return [
       'commerce_shipment.ship.post_transition' => ['onShip'],
+      'commerce_shipment.post_transition' => ['onShippingPostTransition'],
     ];
   }
 
@@ -58,11 +67,32 @@ public function onShip(WorkflowTransitionEvent $event) {
     $shipment_type = $this->entityTypeManager->getStorage('commerce_shipment_type')->load($shipment->bundle());
     $order = $shipment->getOrder();
     assert($order !== NULL);
-
     // Continue only if settings are configured to send confirmation.
     if ($shipment_type->shouldSendConfirmation()) {
       $this->shipmentConfirmationMail->send($shipment, $order->getEmail(), $shipment_type->getConfirmationBcc());
     }
   }
 
+  /**
+   * Creates a log on shipping state update.
+   *
+   * @param \Drupal\state_machine\Event\WorkflowTransitionEvent $event
+   *   The transition event.
+   */
+  public function onShippingPostTransition(WorkflowTransitionEvent $event) {
+    $transition = $event->getTransition();
+    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
+    $shipping = $event->getEntity();
+    $order = $shipping->getOrder();
+    $original_state_id = $order->getState()->getOriginalId();
+    $original_state = $event->getWorkflow()->getState($original_state_id);
+    $this->logStorage->generate($order, 'shipping_state_updated', [
+      'commerce_order' => $order->id(),
+      'commerce_shipment' => $shipping->id(),
+      'shipping_label' => $shipping->label(),
+      'transition_label' => $transition->getLabel(),
+      'from_state' => $original_state ? $original_state->getLabel() : $original_state_id,
+      'to_state' => $order->getState()->getLabel(),
+    ])->save();
+  }
 }
